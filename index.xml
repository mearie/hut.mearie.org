<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>허튼소리</title><link>https://hut.mearie.org/</link><description>허튼소리의 최근 글</description><generator>Hugo -- gohugo.io</generator><language>ko</language><atom:link href="https://hut.mearie.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Ghoti</title><link>https://hut.mearie.org/english/ghoti/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/english/ghoti/</guid><description>Ghoti는 fish의 다른 (그리고 잘못된) 철자이다. 이런 이유로 fish와 같은 /fɪʃ/(국제 음성 기호)로 읽을 수 있다 한다.
gh는 enough, tough 등의 낱말에서 /f/로 발음된다. o는 women에서 /ɪ/로 발음된다. ti는 nation, motion 등의 낱말에서 /ʃ/로 발음된다. 또한 이 낱말은 전혀 발음되지 않을 수도 있다.
gh는 night, fight 등의 낱말에서 발음되지 않는다. o는 people에서 발음되지 않는다. t는 ballet, gourmet, mortgage 등의 낱말에서 발음되지 않는다. i는 business 등의 낱말에서 발음되지 않는다.</description></item><item><title>JSON</title><link>https://hut.mearie.org/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/json/</guid><description>JSON은 자바스크립트의 (거의) 부분집합으로 시작해서 현재는 언어 불문하고 아주 널리 쓰이는 직렬화 포맷이다. 사실상 모든 프로그래밍 언어에 JSON 라이브러리가 있다고 보아도 좋다. JSON보다 30년 정도 이전에 나온 Apple II에서 돌아가는 JSON 라이브러리도 있을 정도이다.
{ &amp;#34;&amp;#34;: null, &amp;#34;excluded middle&amp;#34;: [true, false], &amp;#34;pi&amp;#34;: { &amp;#34;integer&amp;#34;: 3, &amp;#34;decimal&amp;#34;: 3.141592, &amp;#34;von Neumann ordinal&amp;#34;: [{}, [{}], [{}, [{}]]] }, &amp;#34;https://tvtropes.org/pmwiki/pmwiki.php/Main/DyingClue&amp;#34;: &amp;#34;🍖고기 먹고 싶다\r\n\ud83d\uDC1F앗 물고기잖아?!&amp;#34; } JSON에서 가능한 모든 종류의 값(NULL, 불린형, 정수, 소수, 문자열, 배열, 오브젝트)을 사용하는 예제.</description></item><item><title>They</title><link>https://hut.mearie.org/english/they/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/english/they/</guid><description>현대 영어에서 “they”는 인칭 대명사로, 주로 삼인칭 복수에 쓰이지만 단수에도 쓰일 수 있다. 격 변화는 다음과 같다.
격 변화 주격 they 목적격 them 소유격 their 소유대명사 theirs 재귀대명사 themselves, themself 삼인칭 단수에서의 쓰임 “they”가 삼인칭 단수 양성(epicene) 대명사로 쓰인 역사는 길지만, 공식적으로는 남성 he, 여성 she, 무성 it만이 올바른 대명사로 간주되어 왔다. 20세기 후반 이후 성 중립 언어의 요구가 커지면서 성에 무관한 삼인칭 단수 대명사가 여럿 등장했는데, 이 과정에서 they의 삼인칭 단수 용법이 사실상 공식화되기에 이른다.</description></item><item><title>XML</title><link>https://hut.mearie.org/xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/xml/</guid><description>XML(eXtensible Markup Language)은 W3C에서 표준화한 마크업 언어와 그에 연관된 기술이다.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;book xmlns:html=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&amp;gt; &amp;lt;title xml:lang=&amp;#34;ko&amp;#34;&amp;gt;그래도 마을은 돌아간다 &amp;lt;part volume=&amp;#34;1&amp;#34;&amp;gt;1권&amp;lt;/part&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;title xml:lang=&amp;#34;ja&amp;#34;&amp;gt;それでも町は廻っている&amp;lt;part volume=&amp;#34;1&amp;#34;&amp;gt;１&amp;lt;/part&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;isbn&amp;gt;978-89-532-7892-9&amp;lt;/isbn&amp;gt; &amp;lt;date&amp;gt;2015-12-17&amp;lt;/date&amp;gt; &amp;lt;publisher&amp;gt; &amp;lt;name&amp;gt;서울문화사&amp;lt;/name&amp;gt;&amp;lt;!-- 현 서울미디어코믹스 --&amp;gt; &amp;lt;url&amp;gt;https://www.ismg.co.kr/&amp;lt;/url&amp;gt; &amp;lt;/publisher&amp;gt; &amp;lt;author class=&amp;#34;글 그림&amp;#34;&amp;gt; &amp;lt;name&amp;gt;이시구로 마사카즈&amp;lt;/name&amp;gt; &amp;lt;/author&amp;gt; &amp;lt;notes&amp;gt; &amp;lt;html:div&amp;gt;메이드 카페는 나오지 않습니다.&amp;lt;/html:div&amp;gt; &amp;lt;/notes&amp;gt; &amp;lt;/book&amp;gt; 책 정보를 나타내는 XML의 예제. 반구조화된 데이터(제목), 주석, 언어 태깅(xml:lang), XML 네임스페이스를 사용한 확장 등이 보인다.
본디 ISO가 표준화한 SGML(ISO 8879:1986)을 기반으로 해서 겉보기 문법은 거의 같지만, SGML이 허용하는 상당한 유연성을 포기하는 대신 인터넷에서 쓰기 좋도록 크게 단순화한 것이다.</description></item><item><title>도대체 이게 뭡니까?</title><link>https://hut.mearie.org/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/about/</guid><description>지난 십수년간 수차례 글을 쓸 공간을 만들고 때려 치고 하기를 반복했습니다. 대략 네다섯개 정도 되는 블로그부터 시작해서, 위키도 두어 번 만들고, 개인 웹사이트라는 것이 사라져가는 시대에 들어서는 트위터나, 해커뉴스나, (아직도 진득하게 운영하는) IRC나 디스코드 서버나 그런 곳에서 오만가지 잡소리를 싸 댔습니다.
처음에는 글 쓰기가 지겨워져서라고 생각했습니다.
시간이 지나서는 글을 효율적으로 쓸 수 없는 컨텐츠 관리 시스템이 없기 때문이라고 생각했습니다.
시간이 더 지나서야 글을 쓰는 게 문제가 아니라, 작게 쓴 글을 모으는 게 문제라는 걸 깨달았습니다.</description></item><item><title>리듬 게임</title><link>https://hut.mearie.org/rhythm-game/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/rhythm-game/</guid><description>리듬 게임은 액션 게임의 일종으로, 음악, 그 중에서도 특히 그 박자(리듬)를 주 게임 요소로 사용하는 것을 총칭한다. 이론적으로 박자가 아닌 다른 요소를 사용하는 게임은 상위 분류로서 “음악 게임”에 속하는 것이 옳으나, 음악은 사용하는데 박자는 사용하지 않는 것이 사실상 불가능하여 거의 모든 음악 게임은 리듬 게임의 요소를 가지고 있다 할 수 있다.
코어 리듬 게임 매우 많은 리듬 게임이 다음과 같은 요소를 가지고 있다.
박자 요소에 직접적으로 대응되는 예측 가능한 게임 오브젝트 해당 박자에 오브젝트와 겹치게 조정된 판정 영역 오브젝트가 판정 영역을 향해 이동하는 궤적 (미리 보여 주기도 하고, 숨기기도 한다) 박자에 맞게 조작해야 하는 플레이어 컨트롤 박자의 정확도를 시각적으로 보여주는 판정 연속해서 좋은 판정을 낸 횟수를 나타내는 콤보 숫자 워낙 익숙해서 이들 요소가 당연한 것이라고 생각할 수 있지만 그렇지 않다.</description></item><item><title>브레인퍽을 배워 보자</title><link>https://hut.mearie.org/brainfuck/lets-learn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/brainfuck/lets-learn/</guid><description>초기화 및 문자열 출력 가장 간단한 예제는 항상 정해진 내용만 출력하는 코드일 것이다. 이는 현재 칸의 값을 +와 -로 이리 저리 바꿔 가면서 간단하게 만들 수 있다. 예를 들어 -_-(ASCII 값 45, 95, 45)을 출력한다면,
+++++++++++++++++++++++++++++++++++++++++++++.현재 칸을 45로 만들고 출력 ++++++++++++++++++++++++++++++++++++++++++++++++++.현재 칸에 50을 더해 95로 만들고 출력 --------------------------------------------------.현재 칸에 50을 빼 45로 만들고 출력 이런 느낌이 된다. 그러나 45를 한 번 만들었다면 세번째 문자는 이미 만든 45를 다시 쓰면 되는 게 아닌가 하는 생각이 들 수 있는데, 이 때문에 어떤 칸에 있는 숫자를 다른 칸에 “더하는” 코드가 많이 등장한다.</description></item><item><title>소셜 네트워크 사이트</title><link>https://hut.mearie.org/social-network-site/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/social-network-site/</guid><description>소셜 네트워크 사이트(SNS)는 기존 인간 관계를 인터넷 상으로 옮기거나 새로운 종류의 인간 관계를 만드는 것이 목적인 사이트이다. 하지만 인간 관계와 관련해서는 언제나 그렇듯, 이런 시도는 대부분 파국적이다.
옛날 글 The same argument works with Twitter, and I genuinely believed so a decade ago (Twitter has been the only social network I still continuously use). I don&amp;rsquo;t buy it at all after the decade-long experience. Your favorite followers will fight to each other no matter you&amp;rsquo;ve carefully chosen them.</description></item><item><title>아희</title><link>https://hut.mearie.org/aheui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/aheui/</guid><description>아희는 2005년에 정경훈(Puzzlet Chung)이 만든 한글 난해한 프로그래밍 언어이다.
밤밣따빠밣밟따뿌　→→→→→→→┐ 빠맣파빨받밤뚜뭏　┌→→→→→┐↓ 돋밬탕빠맣붏두붇　↑┌→→→┐↓↓ 볻뫃박발뚷투뭏붖　↑↑┌→┐↓↓↓ 뫃도뫃희멓뭏뭏붘　↑↑↑희┘↓↓↓ 뫃봌토범더벌뿌뚜　↑↑└←←┘↓↓ 뽑뽀멓멓더벓뻐뚠　↑└←←←←┘↓ 뽀덩벐멓뻐덕더벅　└←←←←←←┘ “Hello, world!” 프로그램과 그 실행 궤적. 잘 알려져 있진 않지만 이 코드는 내가 짰다.
아희는 한국어권에서 만들어진 것 중에서는 가장 잘 알려진 난해한 프로그래밍 언어이다.
아직 작성 중입니다.</description></item><item><title>윤초</title><link>https://hut.mearie.org/leap-second/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hut.mearie.org/leap-second/</guid><description>협정 세계시(UTC)에서 윤초(leap second)는 평균 태양시와의 오차를 보정하기 위해 가끔 추가되거나 삭제되는 초를 가리킨다.
하루의 길이(LOD, length of day)는 정확히 86 400초가 아니고, 지구 자전 속도의 변화에 따라 바뀔 수 있어서 일정하지 않다. 이 때문에 누적된 오차를 청산하기 위해, 지정된 달의 마지막 날 23:59:59(UTC 기준)를 삭제하여 하루를 86 399초로 만들거나(음의 윤초), 23:59:60을 추가하여 하루를 84 001초로 만드는 것이다(양의 윤초). UTC가 시작된 1972년 이래 윤초는 2021년 6월까지 27회 추가되었으며 삭제된 적은 없다.</description></item></channel></rss>